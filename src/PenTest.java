import static org.junit.Assert.*;

import org.junit.Test;

public class PenTest {

	// tests for Pen(int inkContainerValue)
	@Test
	public void positiveCapasityTest() {
		Pen pen = new Pen(14);
		assertTrue(true);
	}
	
	@Test
	public void nullCapasityTest() {
		Pen pen = new Pen(0);
		assertTrue(true);
	}

	@Test(expected = IllegalArgumentException.class)
	public void negativeCapasityTest() {
		Pen pen = new Pen(-14);
		fail("");
	}

	// tests for Pen(int inkContainerValue, double sizeLetter)
	@Test
	public void positiveCapasityPositiveSizeTest() {
		Pen pen = new Pen(14, 1.0);
		assertTrue(true);
	}

	@Test(expected = IllegalArgumentException.class)
	public void negativeCapasityPositiveSizeTest() {
		Pen pen = new Pen(-14, 1.0);
		fail("");
	}

	@Test(expected = IllegalArgumentException.class)
	public void negativeCapasityNegativeSizeTest() {
		Pen pen = new Pen(-14, -1.0);
		fail("");
	}

	@Test
	public void negativeCapasityNullSizeTest() {
		Pen pen = new Pen(-14, 0.0);
		assertTrue(true);
	}

	@Test
	public void nullCapasityNullSizeTest() {
		Pen pen = new Pen(0, 0.0);
		assertTrue(true);
	}
	
	// tests for Pen(int inkContainerValue, double sizeLetter, String color)
	@Test
	public void positiveCapasityPositiveSizeTrueColorTest() {
		Pen pen = new Pen(14, 1.0, "VIOLET");
		assertTrue(true);
	}

	@Test(expected = IllegalArgumentException.class)
	public void negativeCapasityPositiveSizeTrueColorTest() {
		Pen pen = new Pen(-14, 1.0, "VIOLET");
		fail("");
	}

	@Test(expected = IllegalArgumentException.class)
	public void negativeCapasityNegativeSizeTrueColorTest() {
		Pen pen = new Pen(-14, -1.0, "VIOLET");
		fail("");
	}

	@Test
	public void negativeCapasityZeroSizeTrueColorTest() {
		Pen pen = new Pen(-14, 0.0, "VIOLET");
		assertTrue(true);
	}

	@Test(expected = IllegalArgumentException.class)
	public void positiveCapasityPositiveSizeEmptyColorTest() {
		Pen pen = new Pen(14, 1.0, "");
		fail("");
	}

	@Test(expected = IllegalArgumentException.class)
	public void positiveCapasityPositiveSizeNullColorTest() {
		Pen pen = new Pen(14, 1.0, null);
		fail("");
	}
	
	@Test
	public void nullCapasityNullSizeNullColorTest() {
		Pen pen = new Pen(0, 0.0, null);
		assertTrue(true);
	}
	
	//tests for write(String word)
	@Test
	public void fullWordOneArgTest() {
		Pen pen = new Pen(14);
		assertEquals("ararat", pen.write("ararat"));
	}
	
	@Test
	public void partOfWordOneArgTest() {
		Pen pen = new Pen(4);
		assertEquals("arar", pen.write("ararat"));
	}

	@Test
	public void notWorkOneArgTest() {
		Pen pen = new Pen(0);
		assertEquals("", pen.write("ararat"));
	}
	
	@Test
	public void fullWordTwoArgTest() {
		Pen pen = new Pen(14, 2.0);
		assertEquals("ararat", pen.write("ararat"));
	}
	
	@Test
	public void partOfWordTwoArgTest() {
		Pen pen = new Pen(4, 2.0);
		assertEquals("ar", pen.write("ararat"));
	}
	
	@Test
	public void notWorkTwoArgTest() {
		Pen pen = new Pen(0, 1.5);
		assertEquals("", pen.write("ararat"));
	}
	
	@Test
	public void fullWordThreeArgTest() {
		Pen pen = new Pen(14, 2.0, "VIOLET");
		assertEquals("ararat", pen.write("ararat"));
	}
	
	@Test
	public void partOfWordThreeArgTest() {
		Pen pen = new Pen(4, 0.8, "VIOLET");
		assertEquals("arara", pen.write("ararat"));
	}
	
	@Test
	public void notWorkThreeArgTest() {
		Pen pen = new Pen(0, 1.5, "VIOLET");
		assertEquals("", pen.write("ararat"));
	}
	
	@Test
	public void nullCapasityNullSizeNotEmptyWordTest() {
		Pen pen = new Pen(0, 0.0);
		assertEquals("ararat", pen.write("ararat"));
	}
	
	@Test
	public void emptyWordOneArgTest() {
		Pen pen = new Pen(4);
		assertEquals("", pen.write(""));
	}
	
	@Test
	public void emptyWordTwoArgTest() {
		Pen pen = new Pen(4, 0.5);
		assertEquals("", pen.write(""));
	}
	
	@Test
	public void emptyWordThreeArgTest() {
		Pen pen = new Pen(4, 0.5, "VIOLET");
		assertEquals("", pen.write(""));
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void nullWordOneArgTest() {
		Pen pen = new Pen(4);
		pen.write(null);
		fail("");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void nullWordTwoArgTest() {
		Pen pen = new Pen(4, 0.5);
		pen.write(null);
		fail("");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void nullWordThreeArgTest() {
		Pen pen = new Pen(4, 0.5, "VIOLET");
		pen.write(null);
		fail("");
	}

	//tests for getColor()
	@Test
	public void getColorOneArgTest() {
		Pen pen = new Pen(4);
		assertEquals("BLUE", pen.getColor());
	}
	
	@Test
	public void getColorTwoArgTest() {
		Pen pen = new Pen(4, 0.5);
		assertEquals("BLUE", pen.getColor());
	}
	
	@Test
	public void getColorThreeArgTest() {
		Pen pen = new Pen(4, 0.5, "VIOLET");
		assertEquals("VIOLET", pen.getColor());
	}
	
	//tests for isWork()
		@Test
		public void isWorkOneArgTest() {
			Pen pen = new Pen(4);
			assertTrue(pen.isWork());
		}
		
		@Test
		public void isWorkTwoArgTest() {
			Pen pen = new Pen(4, 0.5);
			assertTrue(pen.isWork());
		}
		
		@Test
		public void isWorkThreeArgTest() {
			Pen pen = new Pen(4, 0.5, "VIOLET");
			assertTrue(pen.isWork());
		}
		
		@Test
		public void isWorkNullCapasityOneArgTest() {
			Pen pen = new Pen(0);
			assertFalse(pen.isWork());
		}
		
		@Test
		public void isWorkNullCapasityTwoArgTest() {
			Pen pen = new Pen(0, 0.5);
			assertFalse(pen.isWork());
		}
		
		@Test
		public void isWorkNullCapasityThreeArgTest() {
			Pen pen = new Pen(0, 0.5, "VIOLET");
			assertFalse(pen.isWork());
		}

}
